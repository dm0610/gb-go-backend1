package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
)

type UploadHandler struct {
	HostAddr  string
	UploadDir string
}

func (h *UploadHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	switch r.URL.Path {
	case "/upload":
		file, header, err := r.FormFile("file")
		if err != nil {
			http.Error(w, "Unable to read file", http.StatusBadRequest)
			return
		}
		defer file.Close()
		data, err := ioutil.ReadAll(file)
		if err != nil {
			http.Error(w, "Unable to read file", http.StatusBadRequest)
			return
		}
		filePath := h.UploadDir + "/" + header.Filename
		err = ioutil.WriteFile(filePath, data, 0777)
		if err != nil {
			log.Println(err)
			http.Error(w, "Unable to save file", http.StatusInternalServerError)
			return
		}
		h.HostAddr = "http://localhost:9090"
		fileLink := h.HostAddr + "/" + header.Filename
		fmt.Fprintln(w, fileLink)
		fmt.Fprintf(w, "File %s has been successfully uploaded", header.Filename)
		//case "/list":
		//	fmt.Println("first try to list")
		//	//listDir := http.Dir(h.UploadDir)
		//	files, err := ioutil.ReadDir(h.UploadDir)
		//	if err != nil {
		//		log.Fatal(err)
		//	}
		//	for _, f := range files {
		//		fmt.Println(f.Name())
		//	}
	}
}

func main() {

	uploadHandler := &UploadHandler{UploadDir: "upload"}

	http.Handle("/upload", uploadHandler)

	dirToServe := http.Dir(uploadHandler.UploadDir)
	fs := http.FileServer(dirToServe)
	http.Handle("/list", fs)
	//srv := &http.Server{
	//	Addr:         ":8080",
	//	ReadTimeout:  10 * time.Second,
	//	WriteTimeout: 10 * time.Second,
	//}

	//fs := &http.Server{
	//	Addr:         ":9090",
	//	Handler:      http.FileServer(dirToServe),
	//	ReadTimeout:  10 * time.Second,
	//	WriteTimeout: 10 * time.Second,
	//}
	//go fs.ListenAndServe()
	http.ListenAndServe(":8080", nil)
	//srv.ListenAndServe()
}
