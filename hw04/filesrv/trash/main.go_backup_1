package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/dm0610/gb-go-backend1/hw04/filesrv/models"
)

type Handler struct {
}

func (h *Handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	switch r.Method {
	case http.MethodGet:
		name := r.FormValue("name")
		fmt.Fprintf(w, "Parsed query-param with key \"name\": %s", name)
	/*	case http.MethodPost:
			body, err := ioutil.ReadAll(r.Body)
			if err != nil {
				http.Error(w, "Unable to read request body", http.StatusBadRequest)
				return
			}
			defer r.Body.Close()
			fmt.Fprintf(w, "Parsed request body: %s\n", string(body))
		}
	*/
	case http.MethodPost:
		/*		body, err := ioutil.ReadAll(r.Body)
				if err != nil {
					http.Error(w, "Unable to parse request body", http.StatusBadRequest)
					return
				}
		*/
		defer r.Body.Close()
		/*		var employee models.Employee
				err = json.Unmarshal(body, &employee)
				if err != nil {
					http.Error(w, "Unable to unmarshal JSON", http.StatusBadRequest)
					return
				}
				fmt.Fprintf(w, "Got a new employee!\nName: %s\nAge: %dy.o.\nSalary %0.2f\n",
					employee.Name,
					employee.Age,
					employee.Salary,
				)
		*/
		var employee models.Employee
		err := json.NewDecoder(r.Body).Decode(&employee)
		if err != nil {
			http.Error(w, "Unable to unmarshal JSON", http.StatusBadRequest)
			return
		}
		fmt.Fprintf(w, "Got a new employee!\nName: %s\nAge: %dy.o.\nSalary %0.2f\n",
			employee.Name,
			employee.Age,
			employee.Salary,
		)

	}

}

func main() {
	handler := &Handler{}
	http.Handle("/", handler)
	srv := &http.Server{
		Addr:         ":80",
		ReadTimeout:  10 * time.Second,
		WriteTimeout: 10 * time.Second,
	}
	srv.ListenAndServe()
}
